commit 4ce351ac7fd13efffc4346a185fd8b2a5df77477
Author: chamorajg <chanduiyer.raja@gmail.com>
Date:   Mon Jul 14 20:54:30 2025 +0000

    ts_exp: -L gait_penalty and command following rewards. python scripts/leanrl/fast_td3.py --task Spot-Velocity-Flat-v1 --action_bounds 15.0 --log_interval 1 --headless --compile False --total_timesteps 2_000_000_000 --log - 2025-07-14 20:54:30

diff --git a/find_and_push_experiment.sh b/find_and_push_experiment.sh
new file mode 100755
index 0000000..66d2219
--- /dev/null
+++ b/find_and_push_experiment.sh
@@ -0,0 +1,84 @@
+#!/bin/bash
+# find_and_push_experiment.sh
+
+set -e
+
+if [ $# -eq 0 ]; then
+    echo "Usage: $0 <commit_hash> [branch_name]"
+    echo "Example: $0 abc123def456"
+    echo "Example: $0 abc123def456 experiment-success"
+    exit 1
+fi
+
+COMMIT_HASH=$1
+BRANCH_NAME=${2:-$(git branch --show-current)}
+
+# Check if commit exists
+if ! git cat-file -e "$COMMIT_HASH" 2>/dev/null; then
+    echo "Error: Commit $COMMIT_HASH not found"
+    exit 1
+fi
+
+# Show the diff for review
+echo "=== Commit Details ==="
+git show --stat "$COMMIT_HASH"
+echo ""
+
+# Check if diff file exists
+DIFF_FILE="ts_logs/${COMMIT_HASH}.diff"
+if [ -f "$DIFF_FILE" ]; then
+    echo "=== Experiment Log Entry ==="
+    grep -A 10 "$COMMIT_HASH" ts_logs/experiment_log.txt || echo "No log entry found"
+    echo ""
+fi
+
+# Ask for confirmation
+echo "Do you want to:"
+echo "1) Cherry-pick this commit to current branch ($BRANCH_NAME)"
+echo "2) Create new branch from this commit"
+echo "3) Reset current branch to this commit (⚠️  DESTRUCTIVE)"
+echo "4) Just show the commit (no changes)"
+echo "5) Cancel"
+
+read -p "Choose option (1-5): " choice
+
+case $choice in
+    1)
+        echo "Cherry-picking commit $COMMIT_HASH..."
+        git cherry-pick "$COMMIT_HASH"
+        echo "Pushing to $BRANCH_NAME..."
+        git push origin "$BRANCH_NAME"
+        echo "✅ Success! Commit cherry-picked and pushed."
+        ;;
+    2)
+        NEW_BRANCH="experiment-$(date +%Y%m%d-%H%M%S)"
+        echo "Creating new branch: $NEW_BRANCH"
+        git checkout -b "$NEW_BRANCH" "$COMMIT_HASH"
+        echo "Pushing new branch..."
+        git push origin "$NEW_BRANCH"
+        echo "✅ Success! New branch $NEW_BRANCH created and pushed."
+        ;;
+    3)
+        echo "⚠️  WARNING: This will reset your current branch to $COMMIT_HASH"
+        echo "All uncommitted changes will be lost!"
+        read -p "Are you sure? (yes/no): " confirm
+        if [ "$confirm" = "yes" ]; then
+            git reset --hard "$COMMIT_HASH"
+            echo "Force pushing to $BRANCH_NAME..."
+            git push --force origin "$BRANCH_NAME"
+            echo "✅ Branch reset and force pushed."
+        else
+            echo "Cancelled."
+        fi
+        ;;
+    4)
+        git show "$COMMIT_HASH"
+        ;;
+    5)
+        echo "Cancelled."
+        ;;
+    *)
+        echo "Invalid option."
+        exit 1
+        ;;
+esac
\ No newline at end of file
diff --git a/source/quadruped/quadruped/tasks/manager_based/quadruped/quadruped_env_cfg.py b/source/quadruped/quadruped/tasks/manager_based/quadruped/quadruped_env_cfg.py
index 1c10e96..257827b 100644
--- a/source/quadruped/quadruped/tasks/manager_based/quadruped/quadruped_env_cfg.py
+++ b/source/quadruped/quadruped/tasks/manager_based/quadruped/quadruped_env_cfg.py
@@ -12,6 +12,7 @@ from isaaclab.envs.mdp.curriculums import modify_reward_weight
 from isaaclab.managers import CurriculumTermCfg as CurrTerm
 from isaaclab.managers import ObservationGroupCfg as ObsGroup
 from isaaclab.managers import ObservationTermCfg as ObsTerm
+from isaaclab.managers import RewardTermCfg as RewTerm
 from isaaclab.managers import SceneEntityCfg
 from isaaclab.managers import TerminationTermCfg as DoneTerm
 from isaaclab.sensors import RayCasterCfg, patterns
@@ -20,7 +21,6 @@ from isaaclab.sensors import RayCasterCfg, patterns
 from isaaclab.terrains.config.rough import ROUGH_TERRAINS_CFG
 from isaaclab.utils import configclass
 from isaaclab.utils.noise import AdditiveUniformNoiseCfg as Unoise
-from isaaclab_tasks.manager_based.locomotion.velocity.config.spot import mdp as spot_mdp
 from isaaclab_tasks.manager_based.locomotion.velocity.config.spot.flat_env_cfg import (  # noqa: F401, F403
     SpotCommandsCfg,
     SpotFlatEnvCfg,
@@ -47,7 +47,7 @@ class SpotFlatEnvCurriculumCfg(CurriculumCfg):
         func=modify_reward_weight,
         params={
             "term_name": "zero_base_linear_velocity_penalty",
-            "weight": -20.0,
+            "weight": -10.0,
             "num_steps": 25_000,
         },
     )
@@ -57,17 +57,17 @@ class SpotFlatEnvCurriculumCfg(CurriculumCfg):
 class SpotRewardsCfgv2(SpotRewardsCfg):
     """Spot velocity tracking with custom terrain pattern and center spawning."""
 
-    zero_base_linear_velocity_penalty = RewardTermCfg(
+    zero_base_linear_velocity_penalty = RewTerm(
         func=zero_base_linear_velocity_penalty,
-        weight=0.0,
+        weight=-5.0,
         params={"std": 2.0, "asset_cfg": SceneEntityCfg("robot")},
     )
 
     def __post_init__(self):
         super().__post_init__()
-        self.base_angular_velocity.weight = 12.0
-        self.base_linear_velocity.weight = 12.0
-        self.gait.weight = 25.0
+        self.base_angular_velocity.weight = 25.0
+        self.base_linear_velocity.weight = 25.0
+        self.gait.weight = 50.0
         self.base_motion.weight = -2.0
         self.base_orientation.weight = -3.0
         self.foot_slip.weight = -2.0
@@ -81,10 +81,6 @@ class SpotFlatEnvCfgv2(SpotFlatEnvCfg):
     rewards: SpotRewardsCfgv2 = SpotRewardsCfgv2()
     curriculum: SpotFlatEnvCurriculumCfg = SpotFlatEnvCurriculumCfg()
 
-    def __post_init__(self):
-        super().__post_init__()
-        print(self.curriculum)
-
 
 # @configclass
 # class SpotVelocityRewardsCfg(SpotRewardsCfg):
diff --git a/ts_exp.sh b/ts_exp.sh
new file mode 100755
index 0000000..637f94b
--- /dev/null
+++ b/ts_exp.sh
@@ -0,0 +1,94 @@
+#!/bin/bash
+
+# ts_exp.sh - Task Spooler Experiment Wrapper
+# This wrapper commits changes, runs experiments on specific commits,
+# and logs diffs for easy tracking and reproducibility
+
+set -e  # Exit on any error
+
+# Check if we're in a git repository
+if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
+    echo "Error: Not in a git repository"
+    exit 1
+fi
+
+# Check if task spooler arguments were provided
+if [ $# -eq 0 ]; then
+    echo "Error: No task spooler command provided"
+    echo "Usage: $0 <ts_arguments>"
+    echo "Example: $0 python train.py --lr 0.01"
+    echo "Example: $0 -L gpu python train.py"
+    exit 1
+fi
+
+# Create ts_logs directory if it doesn't exist
+TS_LOGS_DIR="ts_logs"
+mkdir -p "$TS_LOGS_DIR"
+
+# Check if there are any changes to commit
+if git diff --quiet && git diff --cached --quiet; then
+    echo "No changes to commit. Using current HEAD."
+    COMMIT_HASH=$(git rev-parse HEAD)
+    COMMIT_MSG="ts_exp: Using existing commit $(date '+%Y-%m-%d %H:%M:%S')"
+else
+    # Auto-generate commit message with timestamp and command
+    TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
+    COMMIT_MSG="ts_exp: $* - $TIMESTAMP"
+    
+    # Add all changes
+    echo "Adding changes to git..."
+    git add .
+    
+    # Commit changes
+    echo "Committing changes with message: $COMMIT_MSG"
+    git commit -m "$COMMIT_MSG"
+    
+    # Get the commit hash
+    COMMIT_HASH=$(git rev-parse HEAD)
+fi
+
+echo "Commit hash: $COMMIT_HASH"
+
+# Store current branch name to return to it later
+CURRENT_BRANCH=$(git branch --show-current)
+
+# Create diff file name
+DIFF_FILE="$TS_LOGS_DIR/${COMMIT_HASH}.diff"
+
+# Store the diff of this commit
+echo "Storing diff in: $DIFF_FILE"
+git show "$COMMIT_HASH" > "$DIFF_FILE"
+
+# Create experiment log entry
+LOG_FILE="$TS_LOGS_DIR/experiment_log.txt"
+echo "===========================================" >> "$LOG_FILE"
+echo "Experiment: $TIMESTAMP" >> "$LOG_FILE"
+echo "Commit: $COMMIT_HASH" >> "$LOG_FILE"
+echo "Branch: $CURRENT_BRANCH" >> "$LOG_FILE"
+echo "Command: tsp $*" >> "$LOG_FILE"
+echo "Diff file: $DIFF_FILE" >> "$LOG_FILE"
+echo "===========================================" >> "$LOG_FILE"
+echo "" >> "$LOG_FILE"
+
+# Checkout to the specific commit
+echo "Checking out commit $COMMIT_HASH..."
+git checkout "$COMMIT_HASH"
+
+# Function to cleanup and return to original branch
+cleanup() {
+    echo "Returning to branch: $CURRENT_BRANCH"
+    git checkout "$CURRENT_BRANCH"
+}
+
+# Set trap to ensure we return to original branch on exit
+trap cleanup EXIT
+
+# Run the task spooler command with all arguments
+echo "Running task spooler command: tsp $*"
+echo "This will execute on commit: $COMMIT_HASH"
+echo "Diff stored in: $DIFF_FILE"
+tsp "$@"
+
+echo "Task spooler job queued successfully on commit $COMMIT_HASH"
+echo "Check results and if good, you can cherry-pick or merge this commit: $COMMIT_HASH"
+echo "Diff available at: $DIFF_FILE" 
\ No newline at end of file
